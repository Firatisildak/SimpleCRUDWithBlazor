@page "/"

@using System.Threading
@using ClosedXML.Excel
@using SimpleCRUD.Enum
@using SimpleCRUD.ViewModels
@using SimpleCRUD.Services
@inject EmployeeService EmployeeService
@inject IDialogService DialogService
@inject ISnackbar SnackBar
@inject IJSRuntime JS

@rendermode InteractiveServer
<PageTitle>Home</PageTitle>

<h2 class="text-center">
    Employee Management System
</h2>

<MudDataGrid @ref="dataGrid" T="EmployeeViewModel" MultiSelection="true" Items="@EmployeeViewModel" SortMode="SortMode.Multiple" Filterable="false" QuickFilter="@_quickFilter"
             Hideable="true" RowClick="@RowClicked" RowContextMenuClick="RowRightClicked" SelectedItemsChanged="@SelectedItemsChanged">
    <ToolBarContent>

        <MudButton Class="me-2"
                   @onclick="CreateNewUser"
                   StartIcon="@Icons.Material.Filled.PersonAddAlt1"
                   Variant="Variant.Filled"
                   Color="Color.Primary">
            Add New Employee
        </MudButton>
        <MudFileUpload Class="me-2" T="IBrowserFile" @ref="excelUpload" FilesChanged="UploadFile">
            <ActivatorContent>
                <MudButton Disabled="@importing" Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Custom.FileFormats.FileExcel">
                    @if (importing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"></MudProgressCircular>
                        <MudText Class="ms-2">Processing..</MudText>
                    }
                    else
                    {
                        <MudText>Importh Excell</MudText>
                    }
                </MudButton>
            </ActivatorContent>
        </MudFileUpload>

        <MudButton Disabled="@exporting" @onclick="ExportToExcel" Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Custom.FileFormats.FileExcel">
            @if (exporting)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"></MudProgressCircular>
                <MudText Class="ms-2">Processing..</MudText>
            }
            else
            {
                <MudText>Export Excell</MudText>
            }
        </MudButton>

        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="EmployeeViewModel" />
        <PropertyColumn Property="x => x.EmployeeIdView" Title="Employee Id" />
        <PropertyColumn Property="x => x.FullName" Title="Full Name" />
        <PropertyColumn Property="x => x.Department" />
        <PropertyColumn Property="x => x.DateOfBirth" Format="dd MMM yyyy" Title="Date Of Birth" />
        <PropertyColumn Property="x => x.Age" />
        <PropertyColumn Property="x => x.PhoneNumber" />
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudButton Class="me-2"
                           Size="@Size.Small"
                           Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Filled.Edit"
                           Color="@Color.Warning"
                           OnClick="@(() => this.UpdateEmployee(context))">
                    Update
                </MudButton>
                <MudButton Size="@Size.Small"
                           Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Filled.Delete"
                           Color="@Color.Error"
                           OnClick="@(() => this.RemoveEmployee(context))">
                    Remove
                </MudButton>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="EmployeeViewModel" />
    </PagerContent>
</MudDataGrid>

<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Value="@_sortNameByLength" Color="Color.Primary">Sort Name Column By Length</MudSwitch>
</div>

<MudExpansionPanels Style="flex:1">
    <MudExpansionPanel Text="Show Events">
        @foreach (var message in _events)
        {
            <MudText Typo="@Typo.body2">@message</MudText>
        }
        @if (_events.Count > 0)
        {
            <div class="d-flex">
                <MudSpacer />
                <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    private IEnumerable<EmployeeViewModel> EmployeeViewModel = new List<EmployeeViewModel>();
    MudDataGrid<EmployeeViewModel> dataGrid;
    MudFileUpload<IBrowserFile> excelUpload;
    private string _searchString;
    bool importing = false;
    bool exporting = false;
    private bool _sortNameByLength;
    private List<string> _events = new();

    private Func<EmployeeViewModel, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.FullName.Length;
        else
            return x.FullName;
    };
    private Func<EmployeeViewModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.FullName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.FullName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        EmployeeViewModel = await EmployeeService.GetAllEmployees();
    }

    void RowClicked(DataGridRowClickEventArgs<EmployeeViewModel> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void RowRightClicked(DataGridRowClickEventArgs<EmployeeViewModel> args)
    {
        _events.Insert(0, $"Event = RowRightClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<EmployeeViewModel> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }
    private async Task CreateNewUser()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Large };

        var parameters = new DialogParameters<CreateorUpdateEmployee>
        {
            {x=> x.Action, UIActionEnum.Insert},
            {x=>x.model, new EmployeeViewModel() }
        };

        var dialog = await DialogService.ShowAsync<CreateorUpdateEmployee>("Add Employee", parameters, options);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
            await dataGrid.ReloadServerData();
    }
    private async Task UpdateEmployee(CellContext<EmployeeViewModel> employee)
    {
        var employeeView = EmployeeService.FindEmployee(employee.Item.EmployeeId);
        if (employeeView is null)
        {
            SnackBar.Add("Something wrong when try find the employee!", Severity.Error);
            return;
        }

        var options = new DialogOptions { MaxWidth = MaxWidth.Large };

        var parameters = new DialogParameters<CreateorUpdateEmployee>
        {
            {x=> x.Action, UIActionEnum.Update},
            {x=>x.model, employeeView },
            {x=>x._date, employeeView.DateOfBirth }
        };

        var dialog = await DialogService.ShowAsync<CreateorUpdateEmployee>("Update Employee", parameters, options);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
            await dataGrid.ReloadServerData();
    }
    private async Task RemoveEmployee(CellContext<EmployeeViewModel> employee)
    {
        var dialog = await DialogService.ShowAsync<RemoveConfirmationDialog>("Remove: " + employee.Item.FullName);
        var result = await dialog.Result;

        if(result is not null && !result.Canceled)
        {
            var confirmed = (bool)(result.Data ?? false);
            if (confirmed)
            {
                var deleteResult = EmployeeService.DeleteEmployee(employee.Item.EmployeeId);
                if (deleteResult)
                {
                    SnackBar.Add("Successfully remove the employee!", Severity.Success);
                    await dataGrid.ReloadServerData();
                }
                else
                {
                    SnackBar.Add("Failed remove the employee!", Severity.Error);
                }
            }
        }

    }

    private async Task UploadFile(IBrowserFile file)
    {
        if (file is null) return;
        importing = true;
        try
        {

            using var stream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(stream);

            stream.Position = 0;

            using var workbook = new XLWorkbook(stream);
            var worksheet = workbook.Worksheets.First();

            var rows = worksheet.RowsUsed().Skip(1);

            List<EmployeeViewModel> employees = new List<EmployeeViewModel>();
            foreach (var row in rows)
            {
                EmployeeViewModel employeeViewModel = new EmployeeViewModel
                    {
                        FullName = row.Cell(1).Value.ToString(),
                        Department = row.Cell(2).Value.ToString(),
                        DateOfBirth = row.Cell(3).Value,
                        Age = int.Parse(row.Cell(4).Value.ToString()),
                        PhoneNumber = row.Cell(5).Value.ToString()

                    };
                employees.Add(employeeViewModel);
            }

            var parameters = new DialogParameters<ImportDialog>
        {
            { x => x.employees, employees}
        };

            var options = new DialogOptions() { MaxWidth = MaxWidth.Large };

            var dialog = await DialogService.ShowAsync<ImportDialog>("Ready to import", parameters, options);
            var result = await dialog.Result;

            if(result!=null && !result.Canceled)
            {
                await dataGrid.ReloadServerData();
            }
        }
        catch(Exception ex)
        {

        }
        await excelUpload.ClearAsync();
        importing = false;
    }
    private async Task ExportToExcel()
    {
        exporting = true;
        var excelBytes = await EmployeeService.ExporttoExcel();
        await JS.InvokeVoidAsync("downloadFileFromBytes", "List employess.xlsx", excelBytes);
        exporting = false;
    }

}
