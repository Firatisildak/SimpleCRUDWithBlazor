@page "/"

@using System.Threading
@using SimpleCRUD.ViewModels
@using SimpleCRUD.Services
@inject EmployeeService EmployeeService

@rendermode InteractiveServer


<PageTitle>Home</PageTitle>



<MudDataGrid T="EmployeeViewModel" MultiSelection="true" Items="@EmployeeViewModel" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
             Hideable="true" RowClick="@RowClicked" RowContextMenuClick="RowRightClicked" SelectedItemsChanged="@SelectedItemsChanged">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Employee Management System</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="EmployeeViewModel" />
        <PropertyColumn Property="x => x.EmployeeIdView" Title="Employee Id"/>
        <PropertyColumn Property="x => x.FullName" Title="Full Name" />
        <PropertyColumn Property="x => x.Department"/>
        <PropertyColumn Property="x => x.DateOfBirth" Format="dd MMM yyyy" Title="Date Of Birth" />
        <PropertyColumn Property="x => x.Age"/>
        <PropertyColumn Property="x => x.PhoneNumber"/>
       
    </Columns>
    <PagerContent>
        <MudDataGridPager T="EmployeeViewModel" />
    </PagerContent>
</MudDataGrid>

<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Value="@_sortNameByLength" Color="Color.Primary">Sort Name Column By Length</MudSwitch>
</div>

<MudExpansionPanels Style="flex:1">
    <MudExpansionPanel Text="Show Events">
        @foreach (var message in _events)
        {
            <MudText Typo="@Typo.body2">@message</MudText>
        }
        @if (_events.Count > 0)
        {
            <div class="d-flex">
                <MudSpacer />
                <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    private IEnumerable<EmployeeViewModel> EmployeeViewModel = new List<EmployeeViewModel>();
    private string _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();

    private Func<EmployeeViewModel, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.FullName.Length;
        else
            return x.FullName;
    };
    private Func<EmployeeViewModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.FullName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.FullName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        EmployeeViewModel = await EmployeeService.GetAllEmployees();
    }

    // events
    void RowClicked(DataGridRowClickEventArgs<EmployeeViewModel> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void RowRightClicked(DataGridRowClickEventArgs<EmployeeViewModel> args)
    {
        _events.Insert(0, $"Event = RowRightClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<EmployeeViewModel> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }
}.
